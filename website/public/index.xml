<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Io Programming Language</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on The Io Programming Language</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Io?</title>
      <link>http://localhost:1313/docs/00-preface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/00-preface/</guid>
      <description>&lt;h1 id=&#34;preface-why-io&#34;&gt;&#xA;  Preface: Why Io?&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#preface-why-io&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In a world dominated by class-based object-oriented languages, why should you spend time learning Io, a prototype-based language with a relatively small community? This is a fair question, and one that deserves an honest answer.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-value-of-alternative-paradigms&#34;&gt;&#xA;  The Value of Alternative Paradigms&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-value-of-alternative-paradigms&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Most programmers today work in languages that share remarkably similar conceptual foundations. Whether you&amp;rsquo;re writing Java, C#, Python, or Ruby, you&amp;rsquo;re likely thinking in terms of classes, instances, inheritance hierarchies, and static method definitions. These concepts have served us well, but they represent just one way of organizing computational thought.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code Examples</title>
      <link>http://localhost:1313/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/examples/</guid>
      <description>&lt;h1 id=&#34;code-examples&#34;&gt;&#xA;  Code Examples&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#code-examples&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;All code examples from the book are available for download and experimentation. Each example is a standalone &lt;code&gt;.io&lt;/code&gt; file that you can run directly with the Io interpreter.&lt;/p&gt;&#xA;&lt;h2 id=&#34;running-examples&#34;&gt;&#xA;  Running Examples&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#running-examples&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;To run any example, use the Io interpreter:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;io hello.io&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;examples-by-chapter&#34;&gt;&#xA;  Examples by Chapter&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#examples-by-chapter&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;part-i-foundations&#34;&gt;&#xA;  Part I: Foundations&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#part-i-foundations&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Chapter 2: Getting Started&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/examples/chapter-02/hello.io&#34;&gt;&lt;code&gt;hello.io&lt;/code&gt;&lt;/a&gt; - Your first Io program&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/examples/chapter-02/todo-list.io&#34;&gt;&lt;code&gt;todo-list.io&lt;/code&gt;&lt;/a&gt; - A simple todo list application&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;part-ii-core-concepts&#34;&gt;&#xA;  Part II: Core Concepts&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#part-ii-core-concepts&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Chapter 4: Prototypes, Not Classes&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/examples/chapter-04/prototypes.io&#34;&gt;&lt;code&gt;prototypes.io&lt;/code&gt;&lt;/a&gt; - Working with prototypes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;part-iii-language-features&#34;&gt;&#xA;  Part III: Language Features&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#part-iii-language-features&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Chapter 9: Blocks and Closures&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/examples/chapter-09/closures.io&#34;&gt;&lt;code&gt;closures.io&lt;/code&gt;&lt;/a&gt; - Understanding closures in Io&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;part-iv-advanced-topics&#34;&gt;&#xA;  Part IV: Advanced Topics&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#part-iv-advanced-topics&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Chapter 11: Metaprogramming&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/docs/01-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/01-introduction/</guid>
      <description>&lt;h1 id=&#34;chapter-1-introduction---the-philosophy-of-io&#34;&gt;&#xA;  Chapter 1: Introduction - The Philosophy of Io&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-1-introduction---the-philosophy-of-io&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xA;  &lt;p&gt;&amp;ldquo;The limits of my language mean the limits of my world.&amp;rdquo;&lt;br&gt;&#xA;— Ludwig Wittgenstein&lt;/p&gt;&#xA;&lt;/blockquote&gt;&lt;p&gt;Every programming language embodies a philosophy—a set of beliefs about how programs should be structured, how complexity should be managed, and what concepts are fundamental versus incidental. Java believes in protective encapsulation and type safety. Lisp believes in code as data. Haskell believes in mathematical purity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>http://localhost:1313/docs/02-getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/02-getting-started/</guid>
      <description>&lt;h1 id=&#34;chapter-2-getting-started-with-io&#34;&gt;&#xA;  Chapter 2: Getting Started with Io&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-2-getting-started-with-io&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The best way to understand Io is to use it. In this chapter, we&amp;rsquo;ll install Io, explore its REPL (Read-Eval-Print Loop), and write our first programs. By the end, you&amp;rsquo;ll have a feel for Io&amp;rsquo;s syntax and flow.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installing-io&#34;&gt;&#xA;  Installing Io&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#installing-io&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;macos&#34;&gt;&#xA;  macOS&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#macos&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re on macOS with Homebrew, installation is simple:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install io&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;linux&#34;&gt;&#xA;  Linux&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;p&gt;On most Linux distributions, you&amp;rsquo;ll need to build from source:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Everything is an Object</title>
      <link>http://localhost:1313/docs/03-everything-is-an-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/03-everything-is-an-object/</guid>
      <description>&lt;h1 id=&#34;chapter-3-everything-is-an-object&#34;&gt;&#xA;  Chapter 3: Everything is an Object&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-3-everything-is-an-object&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&amp;ldquo;Everything is an object&amp;rdquo; is a claim made by many languages. Ruby says it. Smalltalk says it. Even Java claims it (though primitives like &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;boolean&lt;/code&gt; break the rule). But what does it really mean? And how thoroughly does Io embrace this principle?&lt;/p&gt;&#xA;&lt;p&gt;In this chapter, we&amp;rsquo;ll explore how Io takes &amp;ldquo;everything is an object&amp;rdquo; to its logical extreme, and what this means for how you write and think about programs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prototypes, Not Classes</title>
      <link>http://localhost:1313/docs/04-prototypes-not-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/04-prototypes-not-classes/</guid>
      <description>&lt;h1 id=&#34;chapter-4-prototypes-not-classes&#34;&gt;&#xA;  Chapter 4: Prototypes, Not Classes&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-4-prototypes-not-classes&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Most object-oriented languages use classes as templates or blueprints for creating objects. You define a class, then instantiate objects from it. There&amp;rsquo;s a fundamental distinction between the template (class) and the things created from it (instances).&lt;/p&gt;&#xA;&lt;p&gt;Io takes a different approach: prototype-based inheritance. There are no classes, only objects. New objects are created by cloning existing objects, and objects can serve as prototypes for other objects. This might seem like a small change, but it fundamentally alters how you think about and structure programs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Messages and Slots</title>
      <link>http://localhost:1313/docs/05-messages-and-slots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/05-messages-and-slots/</guid>
      <description>&lt;h1 id=&#34;chapter-5-messages-and-slots&#34;&gt;&#xA;  Chapter 5: Messages and Slots&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-5-messages-and-slots&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;At the heart of Io lies a simple but powerful idea: all computation happens through message passing. Objects communicate by sending messages to each other, and objects respond to messages by looking up slots. This chapter explores this fundamental mechanism in depth.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-anatomy-of-a-message&#34;&gt;&#xA;  The Anatomy of a Message&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-anatomy-of-a-message&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;When you write this in Io:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;person setName(&amp;quot;Alice&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;What actually happens? Let&amp;rsquo;s break it down:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloning and Inheritance</title>
      <link>http://localhost:1313/docs/06-cloning-and-inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/06-cloning-and-inheritance/</guid>
      <description>&lt;h1 id=&#34;chapter-6-cloning-and-inheritance&#34;&gt;&#xA;  Chapter 6: Cloning and Inheritance&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-6-cloning-and-inheritance&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In class-based languages, inheritance is a relationship between classes. In Io&amp;rsquo;s prototype-based world, inheritance emerges from the simpler mechanism of cloning. When you clone an object, the new object maintains a link to its prototype, creating an inheritance chain. This chapter explores how cloning works, how inheritance emerges from it, and how to use these mechanisms effectively.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-mechanics-of-cloning&#34;&gt;&#xA;  The Mechanics of Cloning&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-mechanics-of-cloning&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;When you clone an object in Io, you don&amp;rsquo;t copy all its data. Instead, you create a new, empty object with a reference to the original:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Control Flow</title>
      <link>http://localhost:1313/docs/07-control-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/07-control-flow/</guid>
      <description>&lt;h1 id=&#34;chapter-7-control-flow&#34;&gt;&#xA;  Chapter 7: Control Flow&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-7-control-flow&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In most programming languages, control flow structures like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;for&lt;/code&gt; are built-in syntax with special rules. In Io, they&amp;rsquo;re just methods that receive messages. This chapter explores how Io&amp;rsquo;s message-passing philosophy extends to control flow, and how you can create your own control structures.&lt;/p&gt;&#xA;&lt;h2 id=&#34;everything-is-a-message&#34;&gt;&#xA;  Everything Is a Message&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#everything-is-a-message&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start with a simple comparison. In C or Java:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (x &amp;gt; 5) {&#xA;    printf(&amp;quot;Big\n&amp;quot;);&#xA;} else {&#xA;    printf(&amp;quot;Small\n&amp;quot;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This is special syntax that the compiler understands. But in Io:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Collections</title>
      <link>http://localhost:1313/docs/08-collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/08-collections/</guid>
      <description>&lt;h1 id=&#34;chapter-8-collections&#34;&gt;&#xA;  Chapter 8: Collections&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-8-collections&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Collections are fundamental to any programming language. Io provides three main collection types: List (ordered, indexed), Map (key-value pairs), and Sequence (strings). This chapter explores these collections, their methods, and how to create custom collection types.&lt;/p&gt;&#xA;&lt;h2 id=&#34;lists-ordered-collections&#34;&gt;&#xA;  Lists: Ordered Collections&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lists-ordered-collections&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Lists in Io are dynamic arrays that can hold any type of object:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Creating lists&#xA;empty := list()&#xA;numbers := list(1, 2, 3, 4, 5)&#xA;mixed := list(&amp;quot;hello&amp;quot;, 42, true, Object clone)&#xA;&#xA;// Lists are objects&#xA;numbers type println  // List&#xA;&#xA;// Basic operations&#xA;numbers size println      // 5&#xA;numbers isEmpty println   // false&#xA;numbers first println     // 1&#xA;numbers last println      // 5&#xA;numbers at(2) println     // 3 (zero-indexed)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;list-manipulation&#34;&gt;&#xA;  List Manipulation&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#list-manipulation&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;fruits := list(&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;)&#xA;&#xA;// Adding elements&#xA;fruits append(&amp;quot;orange&amp;quot;)&#xA;fruits prepend(&amp;quot;grape&amp;quot;)&#xA;fruits println  // list(grape, apple, banana, orange)&#xA;&#xA;// Insert at position&#xA;fruits atInsert(2, &amp;quot;mango&amp;quot;)&#xA;fruits println  // list(grape, apple, mango, banana, orange)&#xA;&#xA;// Removing elements&#xA;fruits remove(&amp;quot;mango&amp;quot;)&#xA;fruits removeAt(0)&#xA;fruits pop  // Removes and returns last element&#xA;fruits println  // list(apple, banana)&#xA;&#xA;// Multiple operations&#xA;fruits appendSeq(list(&amp;quot;kiwi&amp;quot;, &amp;quot;peach&amp;quot;))&#xA;fruits println  // list(apple, banana, kiwi, peach)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;list-iteration&#34;&gt;&#xA;  List Iteration&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#list-iteration&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;numbers := list(1, 2, 3, 4, 5)&#xA;&#xA;// Basic iteration&#xA;numbers foreach(n,&#xA;    n println&#xA;)&#xA;&#xA;// With index&#xA;numbers foreach(i, n,&#xA;    (i .. &amp;quot;: &amp;quot; .. n) println&#xA;)&#xA;&#xA;// Reverse iteration&#xA;numbers reverseForEach(n,&#xA;    n println&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;functional-operations&#34;&gt;&#xA;  Functional Operations&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#functional-operations&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;numbers := list(1, 2, 3, 4, 5)&#xA;&#xA;// Map: transform each element&#xA;squared := numbers map(x, x * x)&#xA;squared println  // list(1, 4, 9, 16, 25)&#xA;&#xA;// Select: filter elements&#xA;evens := numbers select(x, x % 2 == 0)&#xA;evens println  // list(2, 4)&#xA;&#xA;// Reject: inverse of select&#xA;odds := numbers reject(x, x % 2 == 0)&#xA;odds println  // list(1, 3, 5)&#xA;&#xA;// Detect: find first match&#xA;firstEven := numbers detect(x, x % 2 == 0)&#xA;firstEven println  // 2&#xA;&#xA;// Reduce: aggregate&#xA;sum := numbers reduce(+)&#xA;sum println  // 15&#xA;&#xA;// Custom reduce&#xA;product := numbers reduce(a, b, a * b)&#xA;product println  // 120&#xA;&#xA;// Any/all predicates&#xA;numbers contains(3) println  // true&#xA;numbers containsAll(list(2, 4)) println  // true&#xA;numbers containsAny(list(10, 3)) println  // true&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;list-slicing-and-manipulation&#34;&gt;&#xA;  List Slicing and Manipulation&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#list-slicing-and-manipulation&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;letters := list(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;)&#xA;&#xA;// Slicing&#xA;letters slice(1, 3) println  // list(b, c, d)&#xA;letters slice(2) println     // list(c, d, e)&#xA;&#xA;// Copying&#xA;copy := letters copy&#xA;copy atPut(0, &amp;quot;z&amp;quot;)&#xA;letters println  // list(a, b, c, d, e) - unchanged&#xA;copy println     // list(z, b, c, d, e)&#xA;&#xA;// Sorting&#xA;numbers := list(3, 1, 4, 1, 5, 9)&#xA;numbers sort println  // list(1, 1, 3, 4, 5, 9)&#xA;&#xA;// Custom sort&#xA;people := list(&#xA;    Object clone do(name := &amp;quot;Alice&amp;quot;; age := 30),&#xA;    Object clone do(name := &amp;quot;Bob&amp;quot;; age := 25),&#xA;    Object clone do(name := &amp;quot;Charlie&amp;quot;; age := 35)&#xA;)&#xA;&#xA;people sortBy(block(p, p age)) foreach(p,&#xA;    (p name .. &amp;quot;: &amp;quot; .. p age) println&#xA;)&#xA;// Bob: 25&#xA;// Alice: 30&#xA;// Charlie: 35&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;maps-key-value-stores&#34;&gt;&#xA;  Maps: Key-Value Stores&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#maps-key-value-stores&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Maps (also called dictionaries or hash tables) store key-value pairs:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blocks and Closures</title>
      <link>http://localhost:1313/docs/09-blocks-and-closures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/09-blocks-and-closures/</guid>
      <description>&lt;h1 id=&#34;chapter-9-blocks-and-closures&#34;&gt;&#xA;  Chapter 9: Blocks and Closures&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-9-blocks-and-closures&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Blocks in Io are first-class objects representing unevaluated code. They capture their creation context, making them closures. This chapter explores blocks, methods, closures, and how they enable functional programming patterns in Io.&lt;/p&gt;&#xA;&lt;h2 id=&#34;understanding-blocks-and-methods&#34;&gt;&#xA;  Understanding Blocks and Methods&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#understanding-blocks-and-methods&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In Io, &lt;code&gt;block&lt;/code&gt; and &lt;code&gt;method&lt;/code&gt; are similar but have a crucial difference:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Block - creates its own scope&#xA;blk := block(x, x * 2)&#xA;blk call(5) println  // 10&#xA;&#xA;// Method - shares scope with receiver&#xA;obj := Object clone&#xA;obj value := 10&#xA;obj meth := method(x, x * value)  // Can access &#39;value&#39;&#xA;obj blk := block(x, x * value)    // Error when called - no &#39;value&#39; in block scope&#xA;&#xA;obj meth(5) println  // 50&#xA;// obj blk call(5)  // Exception: value not found&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The key difference:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exceptions</title>
      <link>http://localhost:1313/docs/10-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/10-exceptions/</guid>
      <description>&lt;h1 id=&#34;chapter-10-exceptions&#34;&gt;&#xA;  Chapter 10: Exceptions&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-10-exceptions&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Error handling is crucial for robust programs. Io provides an exception system that, like everything else in the language, is built on objects and messages. This chapter explores how exceptions work, how to handle errors gracefully, and how to create custom exception types.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basic-exception-handling&#34;&gt;&#xA;  Basic Exception Handling&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#basic-exception-handling&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Io uses &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;raise&lt;/code&gt; for exception handling:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Basic try-catch&#xA;try(&#xA;    10 / 0  // Division by zero&#xA;) catch(Exception, e,&#xA;    (&amp;quot;Error: &amp;quot; .. e message) println&#xA;)&#xA;// Error: divide by zero&#xA;&#xA;// Multiple catch blocks&#xA;try(&#xA;    someRiskyOperation()&#xA;) catch(TypeError, e,&#xA;    &amp;quot;Type error occurred&amp;quot; println&#xA;) catch(IOException, e,&#xA;    &amp;quot;IO error occurred&amp;quot; println&#xA;) catch(Exception, e,&#xA;    &amp;quot;Some other error occurred&amp;quot; println&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Compare with other languages:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metaprogramming</title>
      <link>http://localhost:1313/docs/11-metaprogramming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/11-metaprogramming/</guid>
      <description>&lt;h1 id=&#34;chapter-11-metaprogramming&#34;&gt;&#xA;  Chapter 11: Metaprogramming&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-11-metaprogramming&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Metaprogramming—writing code that manipulates code—is where Io truly shines. Since everything in Io is an object, including messages and methods, you can inspect, modify, and generate code at runtime. This chapter explores Io&amp;rsquo;s powerful metaprogramming capabilities.&lt;/p&gt;&#xA;&lt;h2 id=&#34;messages-as-data&#34;&gt;&#xA;  Messages as Data&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#messages-as-data&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In Io, code is data. Messages are objects you can create, inspect, and manipulate:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Create a message from code&#xA;msg := message(2 + 3 * 4)&#xA;&#xA;// Inspect its structure&#xA;msg println              // 2 +(3 *(4))&#xA;msg name println         // +&#xA;msg arguments println    // list(Message_0x...)&#xA;msg arguments at(0) println  // 3 *(4)&#xA;&#xA;// Evaluate it&#xA;result := msg doInContext(Lobby)&#xA;result println           // 14&#xA;&#xA;// Modify it&#xA;msg setName(&amp;quot;*&amp;quot;)&#xA;msg doInContext(Lobby) println  // 6 (now it&#39;s 2 * 3 * 4)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Compare this to Lisp&amp;rsquo;s code-as-data philosophy:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Concurrency</title>
      <link>http://localhost:1313/docs/12-concurrency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/12-concurrency/</guid>
      <description>&lt;h1 id=&#34;chapter-12-concurrency&#34;&gt;&#xA;  Chapter 12: Concurrency&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-12-concurrency&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Io provides powerful concurrency primitives: coroutines for cooperative multitasking, actors for message-passing concurrency, and futures for asynchronous computation. This chapter explores these mechanisms and how they enable concurrent and parallel programming in Io.&lt;/p&gt;&#xA;&lt;h2 id=&#34;coroutines-cooperative-multitasking&#34;&gt;&#xA;  Coroutines: Cooperative Multitasking&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#coroutines-cooperative-multitasking&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Coroutines are the foundation of Io&amp;rsquo;s concurrency model. They&amp;rsquo;re lightweight threads that yield control cooperatively:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Create a coroutine&#xA;coro := coroutine(&#xA;    5 repeat(i,&#xA;        (&amp;quot;Coroutine: &amp;quot; .. i) println&#xA;        yield  // Give control back&#xA;    )&#xA;)&#xA;&#xA;// Run it&#xA;5 repeat(&#xA;    &amp;quot;Main&amp;quot; println&#xA;    coro resume  // Resume the coroutine&#xA;)&#xA;// Output interleaves Main and Coroutine messages&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Compare with threads in other languages:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Domain-Specific Languages</title>
      <link>http://localhost:1313/docs/13-domain-specific-languages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/13-domain-specific-languages/</guid>
      <description>&lt;h1 id=&#34;chapter-13-domain-specific-languages&#34;&gt;&#xA;  Chapter 13: Domain-Specific Languages&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-13-domain-specific-languages&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Io&amp;rsquo;s minimal syntax, message-passing model, and metaprogramming capabilities make it ideal for creating Domain-Specific Languages (DSLs). This chapter explores how to build expressive DSLs that feel native to their problem domains.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-io-excels-at-dsls&#34;&gt;&#xA;  Why Io Excels at DSLs&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#why-io-excels-at-dsls&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Several features make Io particularly suitable for DSLs:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Minimal syntax&lt;/strong&gt; - Less language machinery to work around&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Optional parentheses&lt;/strong&gt; - Clean, readable DSL code&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Message chains&lt;/strong&gt; - Natural expression of domain concepts&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Runtime flexibility&lt;/strong&gt; - Modify behavior on the fly&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Homoiconicity&lt;/strong&gt; - Code as manipulable data&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Compare a hypothetical DSL in Io vs Ruby:&lt;/p&gt;</description>
    </item>
    <item>
      <title>C Integration</title>
      <link>http://localhost:1313/docs/14-c-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/14-c-integration/</guid>
      <description>&lt;h1 id=&#34;chapter-14-c-integration&#34;&gt;&#xA;  Chapter 14: C Integration&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-14-c-integration&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Io is implemented in C and provides excellent C integration capabilities. You can extend Io with C libraries, create high-performance addons, and embed Io in C applications. This chapter explores the bidirectional relationship between Io and C.&lt;/p&gt;&#xA;&lt;h2 id=&#34;understanding-ios-c-architecture&#34;&gt;&#xA;  Understanding Io&amp;rsquo;s C Architecture&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#understanding-ios-c-architecture&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Io&amp;rsquo;s core is a small C library (around 10,000 lines) that implements:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The object model (IoObject)&lt;/li&gt;&#xA;&lt;li&gt;The message passing system&lt;/li&gt;&#xA;&lt;li&gt;Basic types (Number, String, List, etc.)&lt;/li&gt;&#xA;&lt;li&gt;The VM and garbage collector&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Everything else is built on top of this foundation, either in C addons or pure Io.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Real-World Patterns</title>
      <link>http://localhost:1313/docs/15-real-world-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/15-real-world-patterns/</guid>
      <description>&lt;h1 id=&#34;chapter-15-real-world-patterns&#34;&gt;&#xA;  Chapter 15: Real-World Patterns&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-15-real-world-patterns&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;After exploring Io&amp;rsquo;s features in isolation, this chapter brings everything together by examining patterns and architectures for building real applications. We&amp;rsquo;ll see how Io&amp;rsquo;s unique features enable elegant solutions to common programming challenges.&lt;/p&gt;&#xA;&lt;h2 id=&#34;model-view-controller-mvc&#34;&gt;&#xA;  Model-View-Controller (MVC)&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#model-view-controller-mvc&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Implementing MVC in Io leverages prototypes and message passing:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Model&#xA;Model := Object clone&#xA;Model init := method(&#xA;    self observers := list()&#xA;    self data := Map clone&#xA;    self&#xA;)&#xA;&#xA;Model set := method(key, value,&#xA;    oldValue := data at(key)&#xA;    if(oldValue != value,&#xA;        data atPut(key, value)&#xA;        notifyObservers(key, oldValue, value)&#xA;    )&#xA;    self&#xA;)&#xA;&#xA;Model get := method(key,&#xA;    data at(key)&#xA;)&#xA;&#xA;Model observe := method(observer,&#xA;    observers append(observer)&#xA;    self&#xA;)&#xA;&#xA;Model notifyObservers := method(key, oldValue, newValue,&#xA;    observers foreach(observer,&#xA;        if(observer hasSlot(&amp;quot;modelChanged&amp;quot;),&#xA;            observer modelChanged(self, key, oldValue, newValue)&#xA;        )&#xA;    )&#xA;)&#xA;&#xA;// View&#xA;View := Object clone&#xA;View init := method(model,&#xA;    self model := model&#xA;    model observe(self)&#xA;    self elements := Map clone&#xA;    self&#xA;)&#xA;&#xA;View modelChanged := method(model, key, oldValue, newValue,&#xA;    render&#xA;)&#xA;&#xA;View render := method(&#xA;    // Override in subclasses&#xA;)&#xA;&#xA;// Controller&#xA;Controller := Object clone&#xA;Controller init := method(model, view,&#xA;    self model := model&#xA;    self view := view&#xA;    self&#xA;)&#xA;&#xA;Controller handleInput := method(input,&#xA;    // Process input and update model&#xA;)&#xA;&#xA;// Example: Todo MVC&#xA;TodoModel := Model clone&#xA;TodoModel init := method(&#xA;    resend&#xA;    self set(&amp;quot;todos&amp;quot;, list())&#xA;    self&#xA;)&#xA;&#xA;TodoModel addTodo := method(text,&#xA;    todos := get(&amp;quot;todos&amp;quot;) copy&#xA;    todos append(Map with(&amp;quot;text&amp;quot;, text, &amp;quot;done&amp;quot;, false))&#xA;    set(&amp;quot;todos&amp;quot;, todos)&#xA;)&#xA;&#xA;TodoModel toggleTodo := method(index,&#xA;    todos := get(&amp;quot;todos&amp;quot;) copy&#xA;    todo := todos at(index)&#xA;    todo atPut(&amp;quot;done&amp;quot;, todo at(&amp;quot;done&amp;quot;) not)&#xA;    set(&amp;quot;todos&amp;quot;, todos)&#xA;)&#xA;&#xA;TodoView := View clone&#xA;TodoView render := method(&#xA;    &amp;quot;=== Todo List ===&amp;quot; println&#xA;    model get(&amp;quot;todos&amp;quot;) foreach(i, todo,&#xA;        status := if(todo at(&amp;quot;done&amp;quot;), &amp;quot;[✓]&amp;quot;, &amp;quot;[ ]&amp;quot;)&#xA;        (i .. &amp;quot;. &amp;quot; .. status .. &amp;quot; &amp;quot; .. todo at(&amp;quot;text&amp;quot;)) println&#xA;    )&#xA;    &amp;quot;================&amp;quot; println&#xA;)&#xA;&#xA;TodoController := Controller clone&#xA;TodoController processCommand := method(cmd,&#xA;    parts := cmd split(&amp;quot; &amp;quot;)&#xA;    action := parts at(0)&#xA;    &#xA;    if(action == &amp;quot;add&amp;quot;,&#xA;        text := parts slice(1) join(&amp;quot; &amp;quot;)&#xA;        model addTodo(text)&#xA;    )&#xA;    &#xA;    if(action == &amp;quot;toggle&amp;quot;,&#xA;        index := parts at(1) asNumber&#xA;        model toggleTodo(index)&#xA;    )&#xA;    &#xA;    if(action == &amp;quot;quit&amp;quot;,&#xA;        System exit&#xA;    )&#xA;)&#xA;&#xA;// Usage&#xA;app := Object clone&#xA;app model := TodoModel clone init&#xA;app view := TodoView clone init(app model)&#xA;app controller := TodoController clone init(app model, app view)&#xA;&#xA;app view render&#xA;// Simulate commands&#xA;app controller processCommand(&amp;quot;add Buy groceries&amp;quot;)&#xA;app controller processCommand(&amp;quot;add Write documentation&amp;quot;)&#xA;app controller processCommand(&amp;quot;toggle 0&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;repository-pattern&#34;&gt;&#xA;  Repository Pattern&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#repository-pattern&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Abstracting data access:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Case Studies</title>
      <link>http://localhost:1313/docs/16-case-studies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/16-case-studies/</guid>
      <description>&lt;h1 id=&#34;chapter-16-case-studies&#34;&gt;&#xA;  Chapter 16: Case Studies&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-16-case-studies&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This chapter presents complete, real-world applications built in Io. Each case study demonstrates how Io&amp;rsquo;s features work together to solve practical problems, showing both the elegance and challenges of building substantial systems in the language.&lt;/p&gt;&#xA;&lt;h2 id=&#34;case-study-1-web-server&#34;&gt;&#xA;  Case Study 1: Web Server&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#case-study-1-web-server&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Building a simple but functional HTTP server demonstrates Io&amp;rsquo;s networking, concurrency, and string handling:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// HTTP Server Implementation&#xA;HttpServer := Object clone&#xA;HttpServer init := method(port,&#xA;    self port := port&#xA;    self routes := Map clone&#xA;    self middlewares := list()&#xA;    self&#xA;)&#xA;&#xA;HttpRequest := Object clone&#xA;HttpRequest parse := method(rawData,&#xA;    lines := rawData split(&amp;quot;\r\n&amp;quot;)&#xA;    if(lines size == 0, return nil)&#xA;    &#xA;    // Parse request line&#xA;    requestLine := lines at(0) split(&amp;quot; &amp;quot;)&#xA;    self method := requestLine at(0)&#xA;    self path := requestLine at(1)&#xA;    self version := requestLine at(2)&#xA;    &#xA;    // Parse headers&#xA;    self headers := Map clone&#xA;    self body := &amp;quot;&amp;quot;&#xA;    &#xA;    bodyStart := false&#xA;    lines slice(1) foreach(line,&#xA;        if(bodyStart,&#xA;            body = body .. line,&#xA;            if(line size == 0,&#xA;                bodyStart = true,&#xA;                parts := line split(&amp;quot;: &amp;quot;)&#xA;                if(parts size == 2,&#xA;                    headers atPut(parts at(0), parts at(1))&#xA;                )&#xA;            )&#xA;        )&#xA;    )&#xA;    &#xA;    // Parse query parameters&#xA;    self params := Map clone&#xA;    if(path containsSeq(&amp;quot;?&amp;quot;),&#xA;        parts := path split(&amp;quot;?&amp;quot;)&#xA;        self path = parts at(0)&#xA;        queryString := parts at(1)&#xA;        &#xA;        queryString split(&amp;quot;&amp;amp;&amp;quot;) foreach(param,&#xA;            kv := param split(&amp;quot;=&amp;quot;)&#xA;            if(kv size == 2,&#xA;                params atPut(kv at(0), kv at(1) urlDecode)&#xA;            )&#xA;        )&#xA;    )&#xA;    &#xA;    self&#xA;)&#xA;&#xA;HttpResponse := Object clone&#xA;HttpResponse init := method(&#xA;    self status := 200&#xA;    self headers := Map clone&#xA;    self body := &amp;quot;&amp;quot;&#xA;    &#xA;    headers atPut(&amp;quot;Content-Type&amp;quot;, &amp;quot;text/html&amp;quot;)&#xA;    headers atPut(&amp;quot;Server&amp;quot;, &amp;quot;Io-Server/1.0&amp;quot;)&#xA;    self&#xA;)&#xA;&#xA;HttpResponse setStatus := method(code,&#xA;    status = code&#xA;    self&#xA;)&#xA;&#xA;HttpResponse setHeader := method(key, value,&#xA;    headers atPut(key, value)&#xA;    self&#xA;)&#xA;&#xA;HttpResponse write := method(content,&#xA;    body = body .. content&#xA;    self&#xA;)&#xA;&#xA;HttpResponse json := method(data,&#xA;    setHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)&#xA;    write(data asJson)&#xA;    self&#xA;)&#xA;&#xA;HttpResponse build := method(&#xA;    statusText := Map with(&#xA;        200, &amp;quot;OK&amp;quot;,&#xA;        404, &amp;quot;Not Found&amp;quot;,&#xA;        500, &amp;quot;Internal Server Error&amp;quot;&#xA;    ) at(status, &amp;quot;Unknown&amp;quot;)&#xA;    &#xA;    result := &amp;quot;HTTP/1.1 &amp;quot; .. status .. &amp;quot; &amp;quot; .. statusText .. &amp;quot;\r\n&amp;quot;&#xA;    &#xA;    headers atPut(&amp;quot;Content-Length&amp;quot;, body size asString)&#xA;    headers foreach(key, value,&#xA;        result = result .. key .. &amp;quot;: &amp;quot; .. value .. &amp;quot;\r\n&amp;quot;&#xA;    )&#xA;    &#xA;    result .. &amp;quot;\r\n&amp;quot; .. body&#xA;)&#xA;&#xA;// Middleware support&#xA;HttpServer use := method(middleware,&#xA;    middlewares append(middleware)&#xA;    self&#xA;)&#xA;&#xA;// Routing&#xA;HttpServer route := method(method, path, handler,&#xA;    key := method .. &amp;quot;:&amp;quot; .. path&#xA;    routes atPut(key, handler)&#xA;    self&#xA;)&#xA;&#xA;HttpServer get := method(path, handler,&#xA;    route(&amp;quot;GET&amp;quot;, path, handler)&#xA;)&#xA;&#xA;HttpServer post := method(path, handler,&#xA;    route(&amp;quot;POST&amp;quot;, path, handler)&#xA;)&#xA;&#xA;// Request handling&#xA;HttpServer handleConnection := method(socket,&#xA;    rawData := socket readUntilSeq(&amp;quot;\r\n\r\n&amp;quot;)&#xA;    &#xA;    request := HttpRequest parse(rawData)&#xA;    if(request isNil,&#xA;        socket close&#xA;        return&#xA;    )&#xA;    &#xA;    response := HttpResponse clone init&#xA;    &#xA;    // Run middlewares&#xA;    middlewares foreach(middleware,&#xA;        middleware call(request, response)&#xA;    )&#xA;    &#xA;    // Find route&#xA;    key := request method .. &amp;quot;:&amp;quot; .. request path&#xA;    handler := routes at(key)&#xA;    &#xA;    if(handler,&#xA;        e := try(&#xA;            handler call(request, response)&#xA;        ) catch(Exception, e,&#xA;            response setStatus(500) write(&amp;quot;Internal Server Error: &amp;quot; .. e message)&#xA;        )&#xA;    ,&#xA;        // Try pattern matching for dynamic routes&#xA;        handled := false&#xA;        routes foreach(routeKey, routeHandler,&#xA;            parts := routeKey split(&amp;quot;:&amp;quot;)&#xA;            routeMethod := parts at(0)&#xA;            routePath := parts at(1)&#xA;            &#xA;            if(routeMethod == request method and matchPath(routePath, request path),&#xA;                routeHandler call(request, response)&#xA;                handled = true&#xA;                break&#xA;            )&#xA;        )&#xA;        &#xA;        if(handled not,&#xA;            response setStatus(404) write(&amp;quot;Not Found&amp;quot;)&#xA;        )&#xA;    )&#xA;    &#xA;    socket write(response build)&#xA;    socket close&#xA;)&#xA;&#xA;HttpServer matchPath := method(pattern, path,&#xA;    // Simple pattern matching (e.g., /users/:id)&#xA;    if(pattern containsSeq(&amp;quot;:&amp;quot;),&#xA;        patternParts := pattern split(&amp;quot;/&amp;quot;)&#xA;        pathParts := path split(&amp;quot;/&amp;quot;)&#xA;        &#xA;        if(patternParts size != pathParts size, return false)&#xA;        &#xA;        patternParts foreach(i, part,&#xA;            if(part beginsWithSeq(&amp;quot;:&amp;quot;) not,&#xA;                if(part != pathParts at(i), return false)&#xA;            )&#xA;        )&#xA;        &#xA;        true&#xA;    ,&#xA;        pattern == path&#xA;    )&#xA;)&#xA;&#xA;HttpServer start := method(&#xA;    server := Socket clone&#xA;    server setHost(&amp;quot;127.0.0.1&amp;quot;)&#xA;    server setPort(port)&#xA;    server bind&#xA;    server listen&#xA;    &#xA;    (&amp;quot;Server listening on port &amp;quot; .. port) println&#xA;    &#xA;    loop(&#xA;        client := server accept&#xA;        @handleConnection(client)  // Handle async&#xA;    )&#xA;)&#xA;&#xA;// Example application&#xA;app := HttpServer clone init(8080)&#xA;&#xA;// Middleware for logging&#xA;app use(block(request, response,&#xA;    (&amp;quot;[&amp;quot; .. Date now .. &amp;quot;] &amp;quot; .. request method .. &amp;quot; &amp;quot; .. request path) println&#xA;))&#xA;&#xA;// Static content&#xA;app get(&amp;quot;/&amp;quot;, block(request, response,&#xA;    response write(&amp;quot;&amp;lt;h1&amp;gt;Welcome to Io Web Server&amp;lt;/h1&amp;gt;&amp;quot;)&#xA;    response write(&amp;quot;&amp;lt;p&amp;gt;A simple server built with Io&amp;lt;/p&amp;gt;&amp;quot;)&#xA;))&#xA;&#xA;// JSON API&#xA;app get(&amp;quot;/api/info&amp;quot;, block(request, response,&#xA;    info := Map with(&#xA;        &amp;quot;server&amp;quot;, &amp;quot;Io-Server&amp;quot;,&#xA;        &amp;quot;version&amp;quot;, &amp;quot;1.0&amp;quot;,&#xA;        &amp;quot;time&amp;quot;, Date now asString&#xA;    )&#xA;    response json(info)&#xA;))&#xA;&#xA;// Dynamic routes&#xA;app get(&amp;quot;/users/:id&amp;quot;, block(request, response,&#xA;    // Extract ID from path&#xA;    id := request path split(&amp;quot;/&amp;quot;) at(2)&#xA;    response write(&amp;quot;&amp;lt;h1&amp;gt;User Profile&amp;lt;/h1&amp;gt;&amp;quot;)&#xA;    response write(&amp;quot;&amp;lt;p&amp;gt;User ID: &amp;quot; .. id .. &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;)&#xA;))&#xA;&#xA;// Form handling&#xA;app post(&amp;quot;/submit&amp;quot;, block(request, response,&#xA;    // Parse form data from body&#xA;    response write(&amp;quot;&amp;lt;h1&amp;gt;Form Submitted&amp;lt;/h1&amp;gt;&amp;quot;)&#xA;    response write(&amp;quot;&amp;lt;p&amp;gt;Data: &amp;quot; .. request body .. &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;)&#xA;))&#xA;&#xA;// Start server&#xA;app start&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;case-study-2-database-orm&#34;&gt;&#xA;  Case Study 2: Database ORM&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#case-study-2-database-orm&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A simple object-relational mapper showcasing metaprogramming and DSL capabilities:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ecosystem and Libraries</title>
      <link>http://localhost:1313/docs/17-ecosystem-and-libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/17-ecosystem-and-libraries/</guid>
      <description>&lt;h1 id=&#34;chapter-17-ecosystem-and-libraries&#34;&gt;&#xA;  Chapter 17: Ecosystem and Libraries&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-17-ecosystem-and-libraries&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;While Io has a smaller ecosystem compared to mainstream languages, it offers a thoughtfully curated set of libraries and tools. This chapter explores the available resources, how to use them effectively, and how to contribute to the Io ecosystem.&lt;/p&gt;&#xA;&lt;h2 id=&#34;core-libraries&#34;&gt;&#xA;  Core Libraries&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#core-libraries&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Io comes with several built-in libraries that extend its capabilities:&lt;/p&gt;&#xA;&lt;h3 id=&#34;file-io-and-system&#34;&gt;&#xA;  File I/O and System&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#file-io-and-system&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// File operations&#xA;file := File with(&amp;quot;data.txt&amp;quot;)&#xA;&#xA;// Reading&#xA;if(file exists,&#xA;    contents := file contents&#xA;    lines := file readLines&#xA;    &#xA;    // Read with encoding&#xA;    file setEncoding(&amp;quot;UTF-8&amp;quot;)&#xA;    text := file contents&#xA;)&#xA;&#xA;// Writing&#xA;file openForWriting&#xA;file write(&amp;quot;Hello, World!\n&amp;quot;)&#xA;file write(&amp;quot;Line 2\n&amp;quot;)&#xA;file close&#xA;&#xA;// Appending&#xA;file openForAppending&#xA;file write(&amp;quot;Additional line\n&amp;quot;)&#xA;file close&#xA;&#xA;// File information&#xA;file size println&#xA;file lastModified println&#xA;file isDirectory println&#xA;&#xA;// Directory operations&#xA;dir := Directory with(&amp;quot;./src&amp;quot;)&#xA;dir files foreach(file,&#xA;    file name println&#xA;)&#xA;&#xA;dir directories foreach(subdir,&#xA;    subdir path println&#xA;)&#xA;&#xA;// Recursive directory walking&#xA;dir recursiveFilesOfType(&amp;quot;io&amp;quot;) foreach(ioFile,&#xA;    ioFile path println&#xA;)&#xA;&#xA;// System operations&#xA;System system(&amp;quot;ls -la&amp;quot;)  // Execute shell command&#xA;System getEnvironmentVariable(&amp;quot;HOME&amp;quot;) println&#xA;System setEnvironmentVariable(&amp;quot;MY_VAR&amp;quot;, &amp;quot;value&amp;quot;)&#xA;System exit(0)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;networking&#34;&gt;&#xA;  Networking&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#networking&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// HTTP Client&#xA;url := URL with(&amp;quot;https://api.example.com/data&amp;quot;)&#xA;url fetch println  // Simple GET request&#xA;&#xA;// With headers&#xA;url setHeader(&amp;quot;Authorization&amp;quot;, &amp;quot;Bearer token&amp;quot;)&#xA;url setHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)&#xA;response := url fetch&#xA;&#xA;// POST request&#xA;url setMethod(&amp;quot;POST&amp;quot;)&#xA;url setBody(&amp;quot;{\&amp;quot;key\&amp;quot;: \&amp;quot;value\&amp;quot;}&amp;quot;)&#xA;response := url fetch&#xA;&#xA;// Socket programming&#xA;// Server&#xA;server := Socket clone&#xA;server setHost(&amp;quot;127.0.0.1&amp;quot;)&#xA;server setPort(8080)&#xA;server bind&#xA;server listen&#xA;&#xA;loop(&#xA;    client := server accept&#xA;    @(&#xA;        data := client readUntilSeq(&amp;quot;\n&amp;quot;)&#xA;        client write(&amp;quot;Echo: &amp;quot; .. data)&#xA;        client close&#xA;    )&#xA;)&#xA;&#xA;// Client&#xA;client := Socket clone&#xA;client setHost(&amp;quot;127.0.0.1&amp;quot;)&#xA;client setPort(8080)&#xA;client connect&#xA;client write(&amp;quot;Hello, server!\n&amp;quot;)&#xA;response := client readUntilSeq(&amp;quot;\n&amp;quot;)&#xA;response println&#xA;client close&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;date-and-time&#34;&gt;&#xA;  Date and Time&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#date-and-time&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Current date/time&#xA;now := Date now&#xA;now println&#xA;&#xA;// Date components&#xA;now year println&#xA;now month println&#xA;now day println&#xA;now hour println&#xA;now minute println&#xA;now second println&#xA;&#xA;// Date arithmetic&#xA;tomorrow := now + Duration days(1)&#xA;nextWeek := now + Duration weeks(1)&#xA;hourAgo := now - Duration hours(1)&#xA;&#xA;// Formatting&#xA;now asString(&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;) println&#xA;now asString(&amp;quot;%B %d, %Y&amp;quot;) println&#xA;&#xA;// Parsing&#xA;date := Date fromString(&amp;quot;2024-01-15&amp;quot;, &amp;quot;%Y-%m-%d&amp;quot;)&#xA;&#xA;// Duration&#xA;duration := Duration clone&#xA;duration setDays(2) setHours(3) setMinutes(30)&#xA;duration asSeconds println&#xA;&#xA;// Timing code&#xA;start := Date now&#xA;// ... code to time ...&#xA;elapsed := Date now - start&#xA;(&amp;quot;Elapsed: &amp;quot; .. elapsed) println&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;regular-expressions&#34;&gt;&#xA;  Regular Expressions&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#regular-expressions&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Basic matching&#xA;text := &amp;quot;The year 2024 has 365 days&amp;quot;&#xA;text matchesRegex(&amp;quot;\\d+&amp;quot;) println  // true&#xA;&#xA;// Finding matches&#xA;match := text findRegex(&amp;quot;\\d+&amp;quot;)&#xA;match start println  // Starting position&#xA;match end println    // Ending position&#xA;match string println // Matched string&#xA;&#xA;// All matches&#xA;matches := text allMatchesOfRegex(&amp;quot;\\d+&amp;quot;)&#xA;matches foreach(m,&#xA;    m string println  // 2024, 365&#xA;)&#xA;&#xA;// Replacement&#xA;result := text replaceFirstRegex(&amp;quot;\\d+&amp;quot;, &amp;quot;N&amp;quot;)&#xA;result println  // The year N has 365 days&#xA;&#xA;result := text replaceAllRegex(&amp;quot;\\d+&amp;quot;, &amp;quot;N&amp;quot;)&#xA;result println  // The year N has N days&#xA;&#xA;// Capture groups&#xA;email := &amp;quot;user@example.com&amp;quot;&#xA;pattern := &amp;quot;(\\w+)@([\\w.]+)&amp;quot;&#xA;if(match := email matchesOfRegex(pattern),&#xA;    match at(1) println  // user&#xA;    match at(2) println  // example.com&#xA;)&#xA;&#xA;// Compiling regex for reuse&#xA;regex := Regex with(&amp;quot;\\b\\w{5}\\b&amp;quot;)  // 5-letter words&#xA;regex matches(&amp;quot;hello&amp;quot;) println  // true&#xA;regex matches(&amp;quot;hi&amp;quot;) println     // false&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;json&#34;&gt;&#xA;  JSON&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#json&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Parsing JSON&#xA;jsonString := &amp;quot;&amp;quot;&amp;quot;&#xA;{&#xA;    &amp;quot;name&amp;quot;: &amp;quot;Alice&amp;quot;,&#xA;    &amp;quot;age&amp;quot;: 30,&#xA;    &amp;quot;interests&amp;quot;: [&amp;quot;coding&amp;quot;, &amp;quot;music&amp;quot;],&#xA;    &amp;quot;address&amp;quot;: {&#xA;        &amp;quot;city&amp;quot;: &amp;quot;New York&amp;quot;,&#xA;        &amp;quot;zip&amp;quot;: &amp;quot;10001&amp;quot;&#xA;    }&#xA;}&#xA;&amp;quot;&amp;quot;&amp;quot;&#xA;&#xA;data := jsonString parseJson&#xA;data at(&amp;quot;name&amp;quot;) println  // Alice&#xA;data at(&amp;quot;interests&amp;quot;) at(0) println  // coding&#xA;data at(&amp;quot;address&amp;quot;) at(&amp;quot;city&amp;quot;) println  // New York&#xA;&#xA;// Creating JSON&#xA;person := Map with(&#xA;    &amp;quot;name&amp;quot;, &amp;quot;Bob&amp;quot;,&#xA;    &amp;quot;age&amp;quot;, 25,&#xA;    &amp;quot;active&amp;quot;, true,&#xA;    &amp;quot;tags&amp;quot;, list(&amp;quot;developer&amp;quot;, &amp;quot;gamer&amp;quot;)&#xA;)&#xA;&#xA;json := person asJson&#xA;json println  // {&amp;quot;name&amp;quot;:&amp;quot;Bob&amp;quot;,&amp;quot;age&amp;quot;:25,&amp;quot;active&amp;quot;:true,&amp;quot;tags&amp;quot;:[&amp;quot;developer&amp;quot;,&amp;quot;gamer&amp;quot;]}&#xA;&#xA;// Pretty printing&#xA;json := person asJson(true)  // Pretty format&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;xml&#34;&gt;&#xA;  XML&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#xml&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-io&#34;&gt;// Parsing XML&#xA;xmlString := &amp;quot;&amp;quot;&amp;quot;&#xA;&amp;lt;root&amp;gt;&#xA;    &amp;lt;person id=&amp;quot;1&amp;quot;&amp;gt;&#xA;        &amp;lt;name&amp;gt;Alice&amp;lt;/name&amp;gt;&#xA;        &amp;lt;age&amp;gt;30&amp;lt;/age&amp;gt;&#xA;    &amp;lt;/person&amp;gt;&#xA;    &amp;lt;person id=&amp;quot;2&amp;quot;&amp;gt;&#xA;        &amp;lt;name&amp;gt;Bob&amp;lt;/name&amp;gt;&#xA;        &amp;lt;age&amp;gt;25&amp;lt;/age&amp;gt;&#xA;    &amp;lt;/person&amp;gt;&#xA;&amp;lt;/root&amp;gt;&#xA;&amp;quot;&amp;quot;&amp;quot;&#xA;&#xA;doc := SGML parseString(xmlString)&#xA;root := doc root&#xA;&#xA;// Navigate XML&#xA;people := root elementsWithName(&amp;quot;person&amp;quot;)&#xA;people foreach(person,&#xA;    id := person attributeAt(&amp;quot;id&amp;quot;)&#xA;    name := person elementWithName(&amp;quot;name&amp;quot;) text&#xA;    age := person elementWithName(&amp;quot;age&amp;quot;) text&#xA;    (id .. &amp;quot;: &amp;quot; .. name .. &amp;quot; (&amp;quot; .. age .. &amp;quot;)&amp;quot;) println&#xA;)&#xA;&#xA;// Build XML&#xA;doc := SGML clone&#xA;root := doc addElement(&amp;quot;catalog&amp;quot;)&#xA;&#xA;book := root addElement(&amp;quot;book&amp;quot;)&#xA;book setAttribute(&amp;quot;isbn&amp;quot;, &amp;quot;123456&amp;quot;)&#xA;book addElement(&amp;quot;title&amp;quot;) setText(&amp;quot;Io Programming&amp;quot;)&#xA;book addElement(&amp;quot;author&amp;quot;) setText(&amp;quot;Jane Doe&amp;quot;)&#xA;book addElement(&amp;quot;price&amp;quot;) setText(&amp;quot;29.99&amp;quot;)&#xA;&#xA;doc asString println&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;addon-system&#34;&gt;&#xA;  Addon System&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#addon-system&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Io&amp;rsquo;s addon system allows loading C-based extensions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Conclusion</title>
      <link>http://localhost:1313/docs/18-conclusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/18-conclusion/</guid>
      <description>&lt;h1 id=&#34;chapter-18-conclusion---the-io-way&#34;&gt;&#xA;  Chapter 18: Conclusion - The Io Way&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chapter-18-conclusion---the-io-way&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h1&gt;&#xA;&lt;p&gt;We&amp;rsquo;ve reached the end of our journey through the Io programming language. From its minimal syntax to its powerful metaprogramming capabilities, from prototype-based objects to concurrent actors, we&amp;rsquo;ve explored a language that challenges conventional programming wisdom. This final chapter reflects on what we&amp;rsquo;ve learned, when to use Io, and what it teaches us about programming itself.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-makes-io-special&#34;&gt;&#xA;  What Makes Io Special&#xA;  &#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-makes-io-special&#34;&gt;#&lt;/a&gt;&#xA;  &#xA;&lt;/h2&gt;&#xA;&lt;p&gt;After eighteen chapters, we can distill Io&amp;rsquo;s essence to a few key principles:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
